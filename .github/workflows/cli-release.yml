name: Build and Release CLI

on:
  push:
    tags:
      - 'v*.*.*'
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  test:
    name: Test CLI
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          cache: true

      - name: Run Go fmt and vet
        run: |
          go fmt ./...
          go vet ./...

      - name: Run CLI unit tests
        run: go test ./cmd/cli/... -v
      
      # We skip the full test-cli which requires Kubernetes clusters
      # But we build to verify it compiles
      - name: Build CLI to verify
        run: go build -o bin/dr-syncer-cli cmd/cli/main.go

  build:
    name: Build and Release CLI
    needs: test
    runs-on: ubuntu-latest
    strategy:
      matrix:
        include:
          - goos: linux
            goarch: amd64
            suffix: ""
          - goos: linux
            goarch: arm64
            suffix: ""
          - goos: darwin
            goarch: amd64
            suffix: ""
          - goos: darwin
            goarch: arm64
            suffix: ""
          - goos: windows
            goarch: amd64
            suffix: ".exe"

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v4
        with:
          go-version: '1.23'
          cache: true

      - name: Set VERSION env
        run: echo "VERSION=$(git describe --tags --always --dirty)" >> $GITHUB_ENV

      - name: Set BUILD_DATE env
        run: echo "BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV

      - name: Set GIT_COMMIT env
        run: echo "GIT_COMMIT=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Build CLI binary
        env:
          GOOS: ${{ matrix.goos }}
          GOARCH: ${{ matrix.goarch }}
        run: |
          mkdir -p dist
          go build -ldflags "-X main.version=${VERSION} -X main.gitCommit=${GIT_COMMIT} -X main.buildDate=${BUILD_DATE}" \
            -o dist/dr-syncer-cli-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }} \
            cmd/cli/main.go

      - name: Compress binary
        run: |
          if [ "${{ matrix.goos }}" = "windows" ]; then
            cd dist && zip dr-syncer-cli-${{ matrix.goos }}-${{ matrix.goarch }}.zip dr-syncer-cli-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }}
          else
            cd dist && tar -czvf dr-syncer-cli-${{ matrix.goos }}-${{ matrix.goarch }}.tar.gz dr-syncer-cli-${{ matrix.goos }}-${{ matrix.goarch }}
          fi

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: dr-syncer-cli-${{ matrix.goos }}-${{ matrix.goarch }}
          path: |
            dist/dr-syncer-cli-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.suffix }}
            dist/dr-syncer-cli-${{ matrix.goos }}-${{ matrix.goarch }}.*

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: build
    if: startsWith(github.ref, 'refs/tags/')
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Prepare release assets
        run: |
          mkdir -p release
          find artifacts -type f -name "*.zip" -o -name "*.tar.gz" | xargs -I{} cp {} release/
          cd release && sha256sum * > checksums.txt

      - name: Generate changelog
        id: changelog
        run: |
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          if [ -z "$PREVIOUS_TAG" ]; then
            git log --pretty=format:"* %s (%h)" > changelog.txt
          else
            git log --pretty=format:"* %s (%h)" $PREVIOUS_TAG..HEAD > changelog.txt
          fi
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          cat changelog.txt >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: softprops/action-gh-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          name: Release ${{ github.ref_name }}
          body: |
            ## Changes in this release

            ${{ steps.changelog.outputs.changelog }}

            ## Binary Downloads

            The following binaries are available for download:

            * Linux (amd64, arm64)
            * macOS (amd64, arm64)
            * Windows (amd64)

            See the checksums.txt file for SHA256 checksums of all files.
          files: |
            release/*
