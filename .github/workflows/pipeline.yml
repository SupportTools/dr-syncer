name: DR Syncer CI/CD Pipeline

on:
  workflow_dispatch:
  push:
    branches:
      - main
    tags:
      - 'v*'  # Run workflow on version tags
  pull_request:
    branches:
      - main

jobs:
  Test:
    runs-on: self-hosted-linux

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - name: Set up kubectl
        uses: azure/setup-kubectl@v4

      - name: Run tests
        run: make test

      - name: Verify CRDs
        run: make test-crds CI=true

  Build:
    runs-on: self-hosted-linux
    needs: Test
    if: github.event_name != 'pull_request'  # Only build/push on main branch or tags

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Determine version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="v${{ github.run_number }}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "TIMESTAMP=${{ github.run_number }}" >> $GITHUB_ENV
          echo "Using version: $VERSION"

      # Build all three Docker images with multi-architecture support
      - name: Build and push controller image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./build/Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            docker.io/supporttools/dr-syncer:${{ env.VERSION }}
            docker.io/supporttools/dr-syncer:latest
          build-args: |
            VERSION=${{ env.VERSION }}
            GIT_COMMIT=${{ github.sha }}
            BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          cache-from: type=registry,ref=docker.io/supporttools/dr-syncer:latest
          cache-to: type=inline

      - name: Build and push agent image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./build/Dockerfile.agent
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            docker.io/supporttools/dr-syncer-agent:${{ env.VERSION }}
            docker.io/supporttools/dr-syncer-agent:latest
          build-args: |
            VERSION=${{ env.VERSION }}
            GIT_COMMIT=${{ github.sha }}
            BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          cache-from: type=registry,ref=docker.io/supporttools/dr-syncer-agent:latest
          cache-to: type=inline

      - name: Build and push rsync image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./build/Dockerfile.rsync
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            docker.io/supporttools/dr-syncer-rsync:${{ env.VERSION }}
            docker.io/supporttools/dr-syncer-rsync:latest
          build-args: |
            VERSION=${{ env.VERSION }}
            GIT_COMMIT=${{ github.sha }}
            BUILD_DATE=$(date -u +%Y-%m-%dT%H:%M:%SZ)
          cache-from: type=registry,ref=docker.io/supporttools/dr-syncer-rsync:latest
          cache-to: type=inline

  Publish:
    runs-on: self-hosted-linux
    needs: Build
    if: github.event_name != 'pull_request'  # Only publish on main branch or tags

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Install dependencies
        run: |
          sudo apt-get update && sudo apt-get install -y gettext

      - name: Set up Helm
        uses: azure/setup-helm@v4.2.0

      - name: Determine version
        id: version
        run: |
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION="v${{ github.run_number }}"
          fi
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "Using version: $VERSION"

      - name: Generate CRDs
        run: make build-crds

      - name: Prepare Helm chart templates
        run: |
          # Create template versions of Chart.yaml and values.yaml if they don't exist
          if [ ! -f "charts/dr-syncer/Chart.yaml.template" ]; then
            cp charts/dr-syncer/Chart.yaml charts/dr-syncer/Chart.yaml.template
            sed -i 's/version:.*/version: ${CHART_VERSION}/g' charts/dr-syncer/Chart.yaml.template
            sed -i 's/appVersion:.*/appVersion: ${APP_VERSION}/g' charts/dr-syncer/Chart.yaml.template
          fi
          
          if [ ! -f "charts/dr-syncer/values.yaml.template" ]; then
            cp charts/dr-syncer/values.yaml charts/dr-syncer/values.yaml.template
            # Update image tags in values.yaml.template - adjust paths based on your values.yaml structure
            sed -i 's|tag:.*|tag: ${IMAGE_TAG}|g' charts/dr-syncer/values.yaml.template
            sed -i 's|agent.image.tag:.*|agent.image.tag: ${IMAGE_TAG}|g' charts/dr-syncer/values.yaml.template
            sed -i 's|rsyncPod.image.tag:.*|rsyncPod.image.tag: ${IMAGE_TAG}|g' charts/dr-syncer/values.yaml.template
          fi

      - name: Package Helm chart
        run: |
          export CHART_VERSION="${{ env.VERSION }}"
          export APP_VERSION="${{ env.VERSION }}"
          export IMAGE_TAG="${{ env.VERSION }}"
          
          echo "CHART_VERSION=${CHART_VERSION}"
          echo "APP_VERSION=${APP_VERSION}"
          echo "IMAGE_TAG=${IMAGE_TAG}"
          
          # Apply templates
          mkdir -p helm/repo
          envsubst < charts/dr-syncer/Chart.yaml.template > charts/dr-syncer/Chart.yaml
          envsubst < charts/dr-syncer/values.yaml.template > charts/dr-syncer/values.yaml
          
          # Lint and package chart
          helm lint charts/dr-syncer/
          helm package charts/dr-syncer --destination helm/repo

      - name: Checkout helm-chart repository
        uses: actions/checkout@v4
        with:
          repository: SupportTools/helm-chart
          path: helm-chart
          token: ${{ secrets.BOT_TOKEN }}

      - name: Configure Git
        run: |
          git config --global user.email "github-action@users.noreply.github.com"
          git config --global user.name "GitHub Action"

      - name: Update Helm repository
        run: |
          cp helm/repo/dr-syncer-*.tgz helm-chart/
          cd helm-chart
          helm repo index . --url https://charts.support.tools/
          git add .
          git commit -m "Update DR Syncer Helm chart to ${{ env.VERSION }}"
          git push

  Release:
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: self-hosted-linux
    needs: Publish
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Extract version from tag
        id: get_version
        run: echo "VERSION=${GITHUB_REF#refs/tags/}" >> $GITHUB_ENV
        
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: DR Syncer ${{ env.VERSION }}
          draft: false
          prerelease: false
          generate_release_notes: true
          files: |
            helm/repo/dr-syncer-*.tgz
